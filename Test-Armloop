
#include <Servo.h>

// Analog PINS
#define PX A0  // LR joystick
#define PY A1  // UD joystick

#define numOfSteppers 4                  // SM1 SM2 EM1 EM2
#define MODEPIN 41
#define CALIPIN 42

#include <Servo.h>

const int stepperDirPins[numOfSteppers]  = {46, 48, 51, 52};
const int stepperStepPins[numOfSteppers] = {47, 49, 50, 53};
int x, y;
long int t1, t2, t3;

typedef struct {
  int pin;
  int speed = 2000;
  int dir = HIGH;
  int dirpin;
  int prox;
  int step = 0;
} motor;

motor em1, em2, sm1, sm2;
Servo hm1;

int angle = 0;
int mode = 0;

void setup() {
  Serial.begin(9600);

  for (int n = 0; n < numOfSteppers; n++) {
    pinMode(stepperDirPins[n], OUTPUT);
    pinMode(stepperStepPins[n], OUTPUT);
  }
  pinMode(A0, INPUT);
  pinMode(A1, INPUT);
 
  sm1.pin = 47;
  sm2.pin = 49;
  em1.pin = 51;
  em2.pin = 53;
  
  sm1.dirpin = 46;
  sm2.dirpin = 48;
  em1.dirpin = 50;
  em2.dirpin = 52;
  
  sm1.prox = 2;
  sm2.prox = 3;
  em1.prox = 4;
  
  pinMode(sm1.prox, INPUT);
  pinMode(sm2.prox, INPUT);
  pinMode(em1.prox, INPUT);
  pinMode(MODEPIN, INPUT_PULLUP);
  pinMode(CALIPIN, INPUT_PULLUP);
  hm1.attach(12);
  angle = 155;

  }

int stepCount = 0;

void loop(){
  
 digitalWrite(sm2.dirpin, HIGH);
 makeSteps(sm2.pin, 1000, 200);
 delay(200);
 digitalWrite(sm2.dirpin, LOW);
 makeSteps(sm2.pin, 1000, 200);
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                              Custom Function Blocks 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                              Do not modify unless sure
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int initialize_motors(){

  hm1.write(60);
  digitalWrite(em1.dirpin, LOW);
  while (!digitalRead(4)) {
    makeStep(em1.pin, 800);
  }
  em1.step = 0;
  digitalWrite(em1.dirpin, HIGH);
  makeSteps(em1.pin, 800, 2200);
  em1.step = 2200;

  digitalWrite(sm1.dirpin, LOW);
  while (!digitalRead(2)) {
    makeStep(sm1.pin, 800);
  }
  sm1.step = 0;
  digitalWrite(sm1.dirpin, HIGH);
  makeSteps(sm1.pin, 800, 2500);
  sm1.step = 2500;

  digitalWrite(sm2.dirpin, HIGH);
  while (!digitalRead(3)) {
    makeStep(sm2.pin, 800);  
  }
  sm2.step = 0;
  digitalWrite(sm2.dirpin, LOW);
  makeSteps(sm2.pin, 800, 3500);
  sm2.step = 3500;

  hm1.write(150);
  }

void makeStep(int motor, int speed) {
  digitalWrite(motor, HIGH);
  delayMicroseconds(800);
  digitalWrite(motor, LOW);
  delayMicroseconds(800);
}

void makeStep2(int motor1, int motor2, int speed){
  digitalWrite(motor1, HIGH);
  digitalWrite(motor2, HIGH);
  delayMicroseconds(800);
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, LOW);
  delayMicroseconds(800);
}

void makeDeg(int motor, int speed){
  int divs; 
    switch(motor){
        case 23:
            divs = 50;
            break;
        case 25:
            divs = 100;
            break;
        case 27:
            divs = 50;
            break;
        case 29:
            divs = 51;
            break;
        default:
            Serial.println("Invalid Motor selected for getDegree");
            break;  
    }
    float x;
    x = round(divs / 1.8);
    makeSteps(motor,speed,x);
}

void makeDegs(int motor, int speed, float degs){
  float x = 0;
  while(x <= round(degs)){
    makeDeg(motor, speed);
    x++;
  }
}

void makeSteps(int motor, int speed, int steps) {
  int x = 0;
  while (x <= steps) {
    makeStep(motor, speed);
    x++;
  }
}

void makeScaledStep(int motor1, int motor2, int speed, float scale){
  int step1 = 20;
  int step2 = 20;
  step2 = step1*scale;
  makeSteps(motor1, speed, step1);
  makeSteps(motor2, speed, step2);
}

float getDegree(int motor, int steps) {
  float angle;
  switch(motor){
    case 23:
        angle = (steps*1.8)/50;
        break;
    case 25:
        angle = (steps*1.8)/100;
        break;
    case 27:
        angle = (steps*1.8)/50;
        break;
    case 29:
        angle = (steps*1.8)/51;
        break;
    default:
        Serial.println("Invalid Motor selected for getDegree");
        break;
  }
  return angle;
}

// int DegToSteps(int motor, int deg){
//   int steps;
//   switch(motor){
//       case 23:
//           steps = (deg*50)/1.8;
//           break;
//       case 25:
//           steps = (deg*100)/43;
//           break;
//       case 27:
//           steps = (deg*50)/1.8;
//           break;
//       case 29:
//           steps = (deg*51)/1.8;
//           break;
//       default:
//           Serial.println("Invalid Motor selected for getDegree");
//           break;
//   }
//   return round(steps);
// }


// void GoToPos(float sm2deg, float em1deg){
//   x[2] = {sm2deg, em1deg};
//   y[2] = {getDegree(24, sm2.steps), getDegree(27, em1.steps)};
//   while((x[i] != y[i]) && (x[i] != -1)){
//     adjustPos(i, y[i], x[i]);
//     i++;
//     if(i>3){
//       break;
//     }
//   }
// }

// void adjustPos(int motorID, int endpos){
//     float tempsteps;
//     if(motorID){
//        tempsteps = (endpos * 100)/1.8;
//        while(sm2.step != tempsteps){
//           if(sm2.step > tempsteps){
//             digitalWrite(sm2.dirpin, HIGH);
//             makeStep(sm2.pin, speed);
//             sm2.step++;
//           else{
//             digitalWrite(sm2.dirpin, LOW);
//             makeStep(sm2.pin, speed);
//             sm2.step--;
//           }
//        } 
//      }
//     }
//     else{

//     }
//   }
