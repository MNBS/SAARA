// Calibration at 41 i.e right blue
// Mode Change at 42 i.e left blue



#include <Servo.h>

// Analog PINS
#define PX A0  // LR joystick
#define PY A1  // UD joystick

#define numOfSteppers 4                  // SM1 SM2 EM1 EM2
#define MODEBUTTON 40
#define MOTORSPEED 900

#include <Servo.h>

const int stepperDirPins[numOfSteppers]  = {46, 48, 51, 52};
const int stepperStepPins[numOfSteppers] = {47, 49, 50, 53};
int x, y;
long int t1, t2, t3;

typedef struct {
  int pin;
  int speed = 2000;
  int dir = HIGH;
  int dirpin;
  int prox;
  int step = 0;
} motor;

motor em1, em2, sm1, sm2;
Servo hm1;
int angle = 0;
float servoscale = 0.4;
bool cali = false;
int mode = 0;
bool sm2max = false;
int buff = 0;

void setup() {
  Serial.begin(9600);

  for (int n = 0; n < numOfSteppers; n++) {
    pinMode(stepperDirPins[n], OUTPUT);
    pinMode(stepperStepPins[n], OUTPUT);

  }
  pinMode(A0, INPUT);
  pinMode(A1, INPUT);
 
  sm1.pin = 47;
  sm2.pin = 49;
  em1.pin = 51;
  em2.pin = 53;
  
  sm1.dirpin = 46;
  sm2.dirpin = 48;
  em1.dirpin = 50;
  em2.dirpin = 52;
  
  sm1.prox = 2;
  sm2.prox = 3;
  em1.prox = 4;
  
  pinMode(sm1.prox, INPUT);
  pinMode(sm2.prox, INPUT);
  pinMode(em1.prox, INPUT);
  pinMode(40, INPUT_PULLUP);
  pinMode(41, INPUT_PULLUP);
  hm1.attach(12);

  }

int stepCount = 0;
int stepCount1 = 0;
volatile int modeFlag = 0;
volatile int caliFlag = 0;

int val=0;
 int scale;

void loop(){

 hm1.write(150);   
  buttoncheck();
 
  if(caliFlag){
    initialize_motors();
    caliFlag = 0;
  }


  x = analogRead(A1);
  y = analogRead(A0);

  hm1.write(150);
// MODE CONTROL BLOCKS //


//**************************************************************** MODE 1 **********************************************************************************//
//********************************************************* X axis controls SM1 ****************************************************************************//
//********************************************************* Y axis controls UP/DOWN ************************************************************************//
  if(digitalRead(MODEBUTTON)){
    
//**************************************************************************************************************************************************//
//********************************************************* SM1 Control ****************************************************************************//
//**************************************************************************************************************************************************//
    if (x > 550) {
 
     digitalWrite(sm1.dirpin, HIGH); // Change HIGH to LOW if you want to switch the direction of motor wrt joystick movement
      makeStep(sm1.pin, 800); // Change 1000 to change speed. Low value = High Speed, but not recommended
      sm1.step--;

      }
    else if (x < 450) {
      digitalWrite(sm1.dirpin, LOW); // Change LOW to HIGH if you want to switch the direction of motor wrt joystick movement
      makeStep(sm1.pin, 800); // Change 1000 to change speed. Low value = High Speed, but not recommended
      sm1.step++;

      }
    else {
   
      }

//******************************************************************************************************************************************************//
//********************************************************* Up/Down Control ****************************************************************************//
//******************************************************************************************************************************************************//
  
  scale = 2;

    if(y < 450){
    
        if(sm2.step > 1200){
            
          digitalWrite(sm2.dirpin, LOW);
          digitalWrite(em1.dirpin, LOW);  
        
        //makeStep2(em1.pin, sm2.pin,1000);
        makeScaledStep(em1.pin, sm2.pin, 1000, 0.7);
        //makeSteps(em1.pin, 1000, scale);
        //makeStep(sm2.pin, 1000);
        em1.step += scale;
          sm2.step--;
        
            }
        else {
          digitalWrite(em1.dirpin, LOW);  
            digitalWrite(sm2.dirpin, HIGH);
        
        //makeStep2(em1.pin, sm2.pin,1000);
        makeScaledStep(em1.pin, sm2.pin, 1000, 0.7);
        //makeSteps(em1.pin, 1000, scale);
        //makeStep(sm2.pin, 1000);
        em1.step += scale; 
          sm2.step++;
         
         }
        // MoveServo(em1.step, sm2.step);
       }
  //       
  //        int ix = round(getDegree(27, em1.step));
  //        angle = round(map(ix, 20, 120, 135, 175));
  //        hm1.write(angle);
  //        
  //      

          
      else if (y > 550) {
        
          if(sm2.step > 1200){
            sm2.dir = HIGH;
            scale = 2;
            sm2.step++;
            
          }
          else { 
            sm2.dir = LOW;
            sm2.step--; 
            }

          digitalWrite(sm2.dirpin,sm2.dir);
          digitalWrite(em1.dirpin, HIGH);    
          
          makeSteps(em1.pin, 800, scale);
          makeStep(sm2.pin, 800);
          
          //makeScaledStep(em1.pin, sm2.pin, 1000, ((100)/(63*3)));
          em1.step -= scale;   
          
         // MoveServo(em1.step, sm2.step);
          }

        
    else{ 
        }
  
  }

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//


//**************************************************************** MODE 2 **********************************************************************************//
//********************************************************* X axis controls SM1 ****************************************************************************//
//*************************************************** Y axis controls FORWARD/BACKWARD ************//
   else{
     
//**************************************************************************************************************************************************//
//********************************************************* SM1 Control ****************************************************************************//
//**************************************************************************************************************************************************//
   if (x > 550) {
 
     digitalWrite(sm1.dirpin, HIGH); // Change HIGH to LOW if you want to switch the direction of motor wrt joystick movement
      makeStep(sm1.pin, 800); // Change 1000 to change speed. Low value = High Speed, but not recommended
      sm1.step--;

      }
    else if (x < 450) {
      digitalWrite(sm1.dirpin, LOW); // Change LOW to HIGH if you want to switch the direction of motor wrt joystick movement
      makeStep(sm1.pin, 800); // Change 1000 to change speed. Low value = High Speed, but not recommended
      sm1.step++;

      }
    else {
   
      }

  


//******************************************************************************************************************************************************//
//********************************************************* Fwd/Bkwd Control ***************************************************************************//
//******************************************************************************************************************************************************//

     if(y < 450){
      
        if(sm2.step > 4000){
            digitalWrite(sm2.dirpin, HIGH);
                  sm2.step++;
        digitalWrite(em1.dirpin, LOW);
        
        //makeStep2(em1.pin, sm2.pin,1000);
        makeScaledStep(em1.pin, sm2.pin, 800, (1.8));
          }

          else{
          digitalWrite(sm2.dirpin, HIGH);
          
        digitalWrite(em1.dirpin, LOW);
        
        //makeStep2(em1.pin, sm2.pin,1000);
        makeScaledStep(em1.pin, sm2.pin, 800, (3.5));
              sm2.step ++;
            }
        //MoveServo(em1.step, sm2.step);

         }

     else if (y > 550){

        if(sm2.step > 4000){
            digitalWrite(sm2.dirpin, LOW);
                 sm2.step--;
        digitalWrite(em1.dirpin, HIGH);
        //makeStep2(em1.pin, sm2.pin,1000);
        makeScaledStep(em1.pin, sm2.pin, 850, (1.8));
            }
        else{
          digitalWrite(sm2.dirpin, LOW);
               sm2.step--;
        digitalWrite(em1.dirpin, HIGH);
        //makeStep2(em1.pin, sm2.pin,1000);
        makeScaledStep(em1.pin, sm2.pin, 850, (3.5));
            }

       // MoveServo(em1.step, sm2.step);
        }
     else {
      }

      }
}




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                              Custom Function Blocks 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                              Do not modify unless sure
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void MoveServo(int em1step, int sm2step) {
  float d1, d2, d3;
  d1 = (sm2step * 1.8) / 100;
  d2 = (em1step * 1.8) / 51;
  d3 = 50 - (d1 + d2);

  hm1.write(fabs(round(d3)));
  
}


void buttoncheck(){
  
  caliFlag = digitalRead(41);
}

int initialize_motors(){

  
  hm1.write(60);
 
  digitalWrite(em1.dirpin, LOW);
  while (!digitalRead(4)) {
    makeStep(em1.pin, 800);
  }
  em1.step = 0;
  digitalWrite(em1.dirpin, HIGH);
  makeSteps(em1.pin, 800, 2200);
  em1.step = 2200;

  digitalWrite(sm1.dirpin, LOW);
  while (!digitalRead(2)) {
    makeStep(sm1.pin, 800);
  }
  sm1.step = 0;
  digitalWrite(sm1.dirpin, HIGH);
  makeSteps(sm1.pin, 800, 2800);
  sm1.step = 2800;

  digitalWrite(sm2.dirpin, HIGH);
  while (!digitalRead(3)) {
    makeStep(sm2.pin, 800);  
  }
  sm2.step = 0;
  digitalWrite(sm2.dirpin, LOW);
  makeSteps(sm2.pin, 800, 3500);
  sm2.step = 3500;

  hm1.write(150);

  }

void makeStep(int motor, int speed) {
  digitalWrite(motor, HIGH);
  delayMicroseconds(MOTORSPEED);
  digitalWrite(motor, LOW);
  delayMicroseconds(MOTORSPEED);
}

void makeStep2(int motor1, int motor2, int speed){
  digitalWrite(motor1, HIGH);
  digitalWrite(motor2, HIGH);
  delayMicroseconds(MOTORSPEED);
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, LOW);
  delayMicroseconds(MOTORSPEED);
}

void makeDeg(int motor, int speed){
  int divs; 
    switch(motor){
        case 23:
            divs = 50;
            break;
        case 25:
            divs = 100;
            break;
        case 27:
            divs = 50;
            break;
        case 29:
            divs = 51;
            break;
        default:
            Serial.println("Invalid Motor selected for getDegree");
            break;  
    }
    float x;
    x = round(divs / 1.8);
    makeSteps(motor,speed,x);
}

void makeDegs(int motor, int speed, float degs){
  float x = 0;
  while(x <= round(degs)){
    makeDeg(motor, speed);
    x++;
  }
}

void makeDegs2(int motor1, int motor2, int speed, int scale){
  float deg1, deg2;
  deg1 = 1; deg2 = 1;
  deg2 = scale*deg1;
  makeDegs(motor1, speed, deg1);
  makeDegs(motor2, speed, round(deg2));
}

void makeSteps(int motor, int speed, int steps) {
  int x = 0;
  while (x <= steps) {
    makeStep(motor, speed);
    x++;
  }
}

void makeScaledStep(int motor1, int motor2, int speed, float scale){
  int step1 = 1;
  int step2 = 1;
  step2 = step1*scale;
  makeSteps(motor1, speed, step1);
  makeSteps(motor2, speed, step2);
}


/*Format of the function is InvK(parameter that gets increased, Parameter that should stay constant, increase = 1, decrease =0)
void InvK(int inc, int adj, int dir){
  float X, Y;
  em1deg = getDegree(em1.pin, em1.step);
  sm2deg = getDegree(sm2.pin, sm2.step);
  Y = l1(sin(sm2deg*0.0174533)) +  l2(sin((sm2deg*0.0174533)+(em1deg*0.0174533)));
  X = l1(cos(sm2deg*0.0174533)) +  l2(cos((sm2deg*0.0174533)+(em1deg*0.0174533)));

  if(X - inc){
    digitalWrite(sm2.dirpin, LOW);
    digitalWrite(em1.dirpin, LOW);
    makeStep2(sm2.pin, em1.pin, 1000);
  }

}
*/

int getDegree(int motor, int steps) {
  float angle;
  switch(motor){
    case 23:
        angle = (steps*1.8)/50;
        break;
    case 25:
        angle = (steps*1.8)/100;
        break;
    case 27:
        angle = (steps*1.8)/50;
        break;
    case 29:
        angle = (steps*1.8)/51;
        break;
    default:
        Serial.println("Invalid Motor selected for getDegree");
        break;
  }
  return angle;
}

void moveDegrees(int motor, int degree, int speed) {
  int x = 0;
  stepCount = 0;
  while (x <= degree) {
    makeStep(motor, speed);
    stepCount++;
    x = getDegree(motor, stepCount);
  }

}

// int DegToSteps(int motor, int deg){
//   int steps;
//   switch(motor){
//       case 23:
//           steps = (deg*50)/1.8;
//           break;
//       case 25:
//           steps = (deg*100)/43;
//           break;
//       case 27:
//           steps = (deg*50)/1.8;
//           break;
//       case 29:
//           steps = (deg*51)/1.8;
//           break;
//       default:
//           Serial.println("Invalid Motor selected for getDegree");
//           break;
//   }
//   return round(steps);
// }


